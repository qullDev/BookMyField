// @title BookMyField API
// @version 1.0
// @description This is a server for BookMyField application with complete payment integration via Stripe.
// @termsOfService http://swagger.io/terms/

// @contact.name qullDev
// @contact.url https://github.com/qullDev
// @contact.email admin@bookmyfield.com

// @license.name MIT
// @license.url https://opensource.org/licenses/MIT

// @host bookmyfield-production.up.railway.app
// @BasePath /api/v1
// @schemes https http
package main

import (
	"log"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"
	"github.com/qullDev/BookMyField/internal/config"
	"github.com/qullDev/BookMyField/internal/models"
	"github.com/qullDev/BookMyField/internal/routes"
	"github.com/qullDev/BookMyField/internal/seed"

	_ "github.com/qullDev/BookMyField/cmd/api/docs" // docs is generated by Swag CLI
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

func main() {
	if err := godotenv.Load(); err != nil {
		log.Println("No .env file found, using environment variables")
	}

	r := gin.Default()

	config.ConnectDatabse()
	config.InitRedis()
	config.InitStripe()

	err := config.DB.AutoMigrate(&models.User{}, &models.Field{}, &models.Booking{}, &models.Payment{})
	if err != nil {
		log.Fatal("Error migrating database:", err.Error())
		return
	}

	// seed data
	seed.SeedAdminUser()
	seed.SeedFields()
	seed.SeedRegularUser()

	// Route
	api_v1 := r.Group("/api/v1")
	{
		routes.AuthRoutes(api_v1)
		routes.BookingsRoutes(api_v1)
		routes.FieldRoutes(api_v1)
		routes.PaymentRoutes(api_v1)
		routes.HealthRoute(api_v1)
	}

	// Payment success/cancel pages (outside API group)
	routes.PaymentPagesRoutes(r)

	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	r.Use(cors.New(cors.Config{
		AllowOrigins:     []string{"*"},
		AllowMethods:     []string{"*"},
		AllowHeaders:     []string{"*"},
		AllowCredentials: false,
	}))

	if err := r.Run(":8080"); err != nil {
		log.Fatal("Error running server:", err.Error())
	}
}
