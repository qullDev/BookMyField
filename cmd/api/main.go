package main

import (
    "log"
    "os"

    "github.com/gin-contrib/cors"
    "github.com/gin-gonic/gin"
    "github.com/joho/godotenv"
    "github.com/qullDev/BookMyField/internal/config"
    "github.com/qullDev/BookMyField/internal/models"
    "github.com/qullDev/BookMyField/internal/routes"
    "github.com/qullDev/BookMyField/internal/seed"

    _ "github.com/qullDev/BookMyField/cmd/api/docs" // docs is generated by Swag CLI
    swaggerFiles "github.com/swaggo/files"
    ginSwagger "github.com/swaggo/gin-swagger"
)

// @title BookMyField API
// @version 1.0
// @description API backend untuk sistem booking lapangan olahraga. Menyediakan endpoints untuk autentikasi, manajemen lapangan, booking, dan pembayaran.
// @termsOfService http://swagger.io/terms/

// @contact.name qullDev
// @contact.url https://github.com/qullDev
// @contact.email admin@bookmyfield.com

// @license.name MIT
// @license.url https://opensource.org/licenses/MIT

// @host localhost:8080
// @BasePath /api/v1
// @schemes http https

// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.

func main() {
    if err := godotenv.Load(); err != nil {
        log.Println("No .env file found, using environment variables")
    }

    r := gin.Default()

    // Setup CORS first
    r.Use(cors.New(cors.Config{
        AllowOrigins:     []string{"*"},
        AllowMethods:     []string{"*"},
        AllowHeaders:     []string{"*"},
        AllowCredentials: false,
    }))

    config.ConnectDatabse()
    config.InitRedis()
    config.InitStripe()

    err := config.DB.AutoMigrate(&models.User{}, &models.Field{}, &models.Booking{}, &models.Payment{})
    if err != nil {
        log.Fatal("Error migrating database:", err.Error())
        return
    }

    // seed data
    seed.SeedAdminUser()
    seed.SeedFields()
    seed.SeedRegularUser()

    // Swagger route
    r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

    // API Routes
    api_v1 := r.Group("/api/v1")
    {
        routes.AuthRoutes(api_v1)
        routes.BookingsRoutes(api_v1)
        routes.FieldRoutes(api_v1)
        routes.PaymentRoutes(api_v1)
        routes.HealthRoute(api_v1)
    }

    // Get port from environment
    port := os.Getenv("PORT")
    if port == "" {
        port = "8080"
    }

    log.Printf("ðŸš€ Server starting on port %s", port)
    log.Printf("ðŸ“š Swagger UI available at: http://localhost:%s/swagger/index.html", port)
    
    if err := r.Run(":" + port); err != nil {
        log.Fatal("Error running server:", err.Error())
    }
}