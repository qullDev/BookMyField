basePath: /api/v1
definitions:
  dto.CancelBookingResponse:
    properties:
      message:
        example: Booking cancelled and payment refunded successfully
        type: string
      refund_id:
        example: re_...
        type: string
      refund_status:
        example: succeeded
        type: string
    type: object
  dto.CreateBookingRequest:
    properties:
      end_time:
        example: "2024-09-15T12:00:00Z"
        type: string
      field_id:
        example: c1f8e4d9-8a2b-4b6e-9c1d-5a8f8c7b6a5d
        type: string
      start_time:
        example: "2024-09-15T10:00:00Z"
        type: string
    required:
    - end_time
    - field_id
    - start_time
    type: object
  dto.CreateCheckoutSessionRequest:
    properties:
      booking_id:
        example: c1f8e4d9-8a2b-4b6e-9c1d-5a8f8c7b6a5d
        type: string
    required:
    - booking_id
    type: object
  dto.CreateCheckoutSessionResponse:
    properties:
      session_id:
        example: cs_test_...
        type: string
      session_url:
        example: https://checkout.stripe.com/pay/cs_test_...
        type: string
    type: object
  dto.CreateFieldRequest:
    properties:
      location:
        example: Jakarta
        type: string
      name:
        example: Lapangan Futsal A
        type: string
      price:
        example: 200000
        type: number
    required:
    - location
    - name
    - price
    type: object
  dto.ErrorResponse:
    properties:
      error:
        example: Something went wrong
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        example: john.doe@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      expires_in:
        example: 3600
        type: integer
      refresh_token:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  dto.LogoutRequest:
    properties:
      refresh_token:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    required:
    - refresh_token
    type: object
  dto.MessageResponse:
    properties:
      message:
        example: Operation successful
        type: string
    type: object
  dto.RefreshRequest:
    properties:
      refresh_token:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    required:
    - refresh_token
    type: object
  dto.RegisterRequest:
    properties:
      email:
        example: john.doe@example.com
        type: string
      name:
        example: John Doe
        minLength: 2
        type: string
      password:
        example: password123
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  models.Booking:
    properties:
      created_at:
        type: string
      end_time:
        type: string
      field:
        $ref: '#/definitions/models.Field'
      field_id:
        type: string
      id:
        type: string
      notes:
        type: string
      payments:
        items:
          $ref: '#/definitions/models.Payment'
        type: array
      start_time:
        type: string
      status:
        description: pending, confirmed, canceled
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: string
    type: object
  models.Field:
    properties:
      created_at:
        type: string
      id:
        type: string
      location:
        type: string
      name:
        type: string
      price:
        type: number
      updated_at:
        type: string
    type: object
  models.Payment:
    properties:
      amount:
        type: number
      booking:
        $ref: '#/definitions/models.Booking'
      booking_id:
        type: string
      created_at:
        type: string
      currency:
        type: string
      id:
        type: string
      status:
        description: pending, paid, failed
        type: string
      stripe_ref_id:
        description: session ID atau payment intent ID
        type: string
      updated_at:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      role:
        description: user or admin
        type: string
      updated_at:
        type: string
    type: object
host: bookmyfield-production.up.railway.app
info:
  contact:
    email: admin@bookmyfield.com
    name: qullDev
    url: https://github.com/qullDev
  description: This is a server for BookMyField application with complete payment
    integration via Stripe.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: BookMyField API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Log in a user with email and password
      parameters:
      - description: User login credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Log in a user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Log out a user by blacklisting access token and deleting refresh
        token
      parameters:
      - description: Refresh token to invalidate
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Log out a user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh access token using a refresh token
      parameters:
      - description: Refresh token
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with name, email, and password
      parameters:
      - description: User registration data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /bookings:
    get:
      description: Get a list of all bookings. Requires admin privileges.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Booking'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all bookings (Admin only)
      tags:
      - bookings
    post:
      consumes:
      - application/json
      description: Create a new booking for a field.
      parameters:
      - description: Booking data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.CreateBookingRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Booking'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new booking
      tags:
      - bookings
  /bookings/{id}/cancel:
    delete:
      description: Cancel a booking by its ID. If payment exists, it will be refunded.
      parameters:
      - description: Booking ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CancelBookingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Cancel a booking
      tags:
      - bookings
  /bookings/me:
    get:
      description: Get a list of bookings for the currently authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Booking'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get my bookings
      tags:
      - bookings
  /fields:
    get:
      description: Get a list of all fields with optional filtering by location and
        price range
      parameters:
      - description: Location filter (case-insensitive)
        in: query
        name: location
        type: string
      - description: Minimum price filter
        in: query
        name: min_price
        type: number
      - description: Maximum price filter
        in: query
        name: max_price
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Field'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get all fields
      tags:
      - fields
  /fields/{id}:
    get:
      description: Get a single field by its ID
      parameters:
      - description: Field ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Field'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get a field by ID
      tags:
      - fields
  /fields/admin:
    post:
      consumes:
      - application/json
      - application/json
      description: |-
        Create a new field. Requires admin privileges.
        Create a new field. Requires admin privileges.
      parameters:
      - description: Field data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.CreateFieldRequest'
      produces:
      - application/json
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Field'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      - BearerAuth: []
      summary: Create a new field (Admin only)
      tags:
      - fields
      - fields
  /fields/admin/{id}:
    delete:
      description: Delete a field by its ID. Requires admin privileges.
      parameters:
      - description: Field ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Delete a field (Admin only)
      tags:
      - fields
    put:
      consumes:
      - application/json
      description: Update an existing field. Requires admin privileges.
      parameters:
      - description: Field ID
        in: path
        name: id
        required: true
        type: string
      - description: Field Info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Field'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Field'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update a field (Admin only)
      tags:
      - fields
  /payments:
    get:
      description: Get all payments with booking and user details (admin only).
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Payment'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all payments for admin
      tags:
      - payments
  /payments/{id}:
    get:
      description: Get payment details by payment ID.
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Payment'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get payment by ID
      tags:
      - payments
  /payments/create-checkout-session:
    post:
      consumes:
      - application/json
      description: Create a new checkout session for a booking payment.
      parameters:
      - description: Booking ID for payment
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCheckoutSessionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CreateCheckoutSessionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a checkout session
      tags:
      - payments
  /payments/me:
    get:
      description: Get all payments for the authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Payment'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user's payments
      tags:
      - payments
  /payments/stripe-webhook:
    post:
      consumes:
      - application/json
      description: Handle Stripe webhook events to update payment and booking status.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Stripe webhook
      tags:
      - payments
  /payments/stripe-webhook-test:
    post:
      consumes:
      - application/json
      description: Test webhook endpoint without signature validation for development/testing
        purposes.
      parameters:
      - description: Test webhook payload
        in: body
        name: webhook_data
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Test Stripe webhook (Development only)
      tags:
      - payments
schemes:
- https
- http
swagger: "2.0"
